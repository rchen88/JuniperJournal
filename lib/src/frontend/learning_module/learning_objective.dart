import 'package:flutter/material.dart';
import 'package:juniper_journal/src/frontend/learning_module/3d_learning.dart';
import '../../styling/app_colors.dart';
import 'create_lm_template.dart';
import '../../backend/db/repositories/learning_module_repo.dart';
import 'package:intl/intl.dart';

/// Purpose: To clearly define what students will know or be able to do by the end of the lesson.  
/// These objectives guide instructional focus and support the generation of aligned performance expectations.
///
/// Key Functions:
/// - Establishes the core learning outcomes
/// - Drives automatic generation of performance expectation (PE) statements
/// - Aligned with NGSS-style action verbs for consistency in standards-based instruction
/// - Selected verbs shape the language used in autogenerated performance expectations and summaries
///
/// Creator Actions / Behaviors:
/// - Creators select up to 4 action verbs from the following options:
///   Analyze, Evaluate, Design, Explore
/// - Align selected verbs with the intended depth of learning and NGSS-aligned outcomes
/// - Use selected objectives to drive content design and performance expectations
///
/// User Actions / Behaviors:
/// - View the selected learning objectives at the start of the module
/// - Use the objectives to understand what skills or understandings the lesson is designed to build
/// - Reflect on or reference objectives during learning activities or assessments

class LearningObjectiveScreen extends StatefulWidget {
  final Map<String, dynamic> module;

  const LearningObjectiveScreen({super.key, required this.module});

  @override
  State<LearningObjectiveScreen> createState() =>
      _LearningObjectiveScreenState();
}


class _LearningObjectiveScreenState extends State<LearningObjectiveScreen> {
  final _formKey = GlobalKey<FormState>();
  Map<String, dynamic>? _freshModuleData;
  final String _currentSection = 'OBJECTIVE';

  /// Single selections for learning objective and subject domain
  String? _selectedLearningObjective;
  String? _selectedSubjectDomain;

  /// List of added combinations for performance expectations
  final List<Map<String, String>> _addedCombinations = [];

  final List<String> _learningObjectiveOptions = [
    'Analyze',
    'Evaluate',
    'Design',
    'Explore',
  ];

  final List<String> _subjectDomainOptions = [
    'Environmental Sustainability',
    'Engineering & Design',
    'Energy & Systems',
    'Community & The Built Environment',
  ];

  @override
  void initState() {
    super.initState();
    _loadFreshModuleData();
  }

  void _loadFreshModuleData() async {
    if (widget.module['id'] != null) {
      final repo = LearningModuleRepo();
      final freshData = await repo.getModule(widget.module['id'].toString());
      if (freshData != null) {
        setState(() {
          _freshModuleData = freshData;
          _loadExistingCombinations(freshData);
        });
      }
    }
  }

  void _loadExistingCombinations(Map<String, dynamic> moduleData) {
    try {
      // Safely convert to List regardless of stored type
      List<dynamic> learningObjectives = [];
      List<dynamic> subjectDomains = [];

      // Handle learning_objectives
      final objData = moduleData['learning_objectives'];
      if (objData is List) {
        learningObjectives = objData;
      } else if (objData is String && objData.isNotEmpty) {
        // Handle string that might be JSON array representation
        if (objData.startsWith('[') && objData.endsWith(']')) {
          try {
            // Remove brackets and quotes, split by comma
            final cleanString = objData.substring(1, objData.length - 1);
            learningObjectives = cleanString
                .split(',')
                .map((s) => s.trim().replaceAll('"', '').replaceAll("'", ''))
                .where((s) => s.isNotEmpty)
                .toList();
          } catch (e) {
            learningObjectives = [objData];
          }
        } else {
          learningObjectives = [objData];
        }
      }

      // Handle subject_domain
      final domainData = moduleData['subject_domain'];
      if (domainData is List) {
        subjectDomains = domainData;
      } else if (domainData is String && domainData.isNotEmpty) {
        // Handle string that might be JSON array representation
        if (domainData.startsWith('[') && domainData.endsWith(']')) {
          try {
            // Remove brackets and quotes, split by comma
            final cleanString = domainData.substring(1, domainData.length - 1);
            subjectDomains = cleanString
                .split(',')
                .map((s) => s.trim().replaceAll('"', '').replaceAll("'", ''))
                .where((s) => s.isNotEmpty)
                .toList();
          } catch (e) {
            subjectDomains = [domainData];
          }
        } else {
          subjectDomains = [domainData];
        }
      }

      // Load combinations if data exists and lengths match
      if (learningObjectives.isNotEmpty &&
          subjectDomains.isNotEmpty &&
          learningObjectives.length == subjectDomains.length) {
        _addedCombinations.clear();
        for (int i = 0; i < learningObjectives.length; i++) {
          _addedCombinations.add({
            'objective': learningObjectives[i].toString(),
            'domain': subjectDomains[i].toString(),
          });
        }
      }
    } catch (e) {
      debugPrint('Error loading existing combinations: $e');
      _addedCombinations.clear();
    }
  }


  // Might want to handle this better in the future...
  // Constantly updates DB on every addition / subtraction
  Future<void> _saveCombinationsToDatabase() async {
    final repo = LearningModuleRepo();
    final moduleId = widget.module['id'].toString();

    // Extract objectives and domains from combinations
    final selectedObjectives = _addedCombinations
        .map((combo) => combo['objective']!)
        .toList();

    final selectedDomains = _addedCombinations
        .map((combo) => combo['domain']!)
        .toList();

    // Create performance expectations array
    final performanceExpectations = _addedCombinations
        .map((combo) => '${combo['objective']!.toUpperCase()}: ${combo['domain']!.toUpperCase()}')
        .toList();

    // Update learning objectives, subject domains, and performance expectations
    final objectivesSuccess = await repo.updateLearningObjectives(
      id: moduleId,
      learningObjectives: selectedObjectives,
    );

    final domainsSuccess = await repo.updateSubjectDomains(
      id: moduleId,
      subjectDomains: selectedDomains,
    );

    final performanceSuccess = await repo.updatePerformanceExpectations(
      id: moduleId,
      performanceExpectations: performanceExpectations,
    );

    if (!objectivesSuccess || !domainsSuccess || !performanceSuccess) {
      // Check if widget is still mounted before using context
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Failed to save learning objectives'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    }
  }

  String _formatDate(String? createdAt) {
    if (createdAt == null) return 'Date not available';

    try {
      final dateTime = DateTime.parse(createdAt).toLocal();
      final formatter = DateFormat('EEEE, MMMM d');
      return formatter.format(dateTime);
    } catch (e) {
      return 'Date error';
    }
  }

  String _buildLearningObjectiveHeader() {
    if (_addedCombinations.isNotEmpty) {
      return _addedCombinations
          .map((combo) => '${combo['objective']!.toUpperCase()}: ${combo['domain']!.toUpperCase()}')
          .join('\n');
    }

    // Fallback to database data if no combinations added yet
    final moduleData = _freshModuleData ?? widget.module;

    // Use the same safe conversion logic as in _loadExistingCombinations
    List<dynamic> learningObjectives = [];
    List<dynamic> subjectDomains = [];

    // Handle learning_objectives
    final objData = moduleData['learning_objectives'];
    if (objData is List) {
      learningObjectives = objData;
    } else if (objData is String && objData.isNotEmpty) {
      // Handle string that might be JSON array representation
      if (objData.startsWith('[') && objData.endsWith(']')) {
        try {
          // Remove brackets and quotes, split by comma
          final cleanString = objData.substring(1, objData.length - 1);
          learningObjectives = cleanString
              .split(',')
              .map((s) => s.trim().replaceAll('"', '').replaceAll("'", ''))
              .where((s) => s.isNotEmpty)
              .toList();
        } catch (e) {
          learningObjectives = [objData];
        }
      } else {
        learningObjectives = [objData];
      }
    }

    // Handle subject_domain
    final domainData = moduleData['subject_domain'];
    if (domainData is List) {
      subjectDomains = domainData;
    } else if (domainData is String && domainData.isNotEmpty) {
      // Handle string that might be JSON array representation
      if (domainData.startsWith('[') && domainData.endsWith(']')) {
        try {
          // Remove brackets and quotes, split by comma
          final cleanString = domainData.substring(1, domainData.length - 1);
          subjectDomains = cleanString
              .split(',')
              .map((s) => s.trim().replaceAll('"', '').replaceAll("'", ''))
              .where((s) => s.isNotEmpty)
              .toList();
        } catch (e) {
          subjectDomains = [domainData];
        }
      } else {
        subjectDomains = [domainData];
      }
    }

    if (learningObjectives.isNotEmpty &&
        subjectDomains.isNotEmpty &&
        learningObjectives.length == subjectDomains.length) {
      final combinations = <String>[];
      for (int i = 0; i < learningObjectives.length; i++) {
        combinations.add('${learningObjectives[i].toString().toUpperCase()}: ${subjectDomains[i].toString().toUpperCase()}');
      }
      return combinations.join('\n');
    }

    return 'LEARNING OBJECTIVES NOT SET';
  }

  String _buildInquiryText() {
    final moduleData = _freshModuleData ?? widget.module;
    final inquiry = moduleData['inquiry'] as List?;
    if (inquiry != null && inquiry.isNotEmpty) {
      return inquiry.join('\n\n');
    }
    return 'No inquiry data available';
  }

  @override
  Widget build(BuildContext context) {
    final moduleName = widget.module['module_name'] ?? 'Module Name';
    final formattedDate = _formatDate(widget.module['created_at']);
    final learningObjectiveHeader = _buildLearningObjectiveHeader();
    final inquiryText = _buildInquiryText();

    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: AppColors.border),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              moduleName,
              style: const TextStyle(
                color: AppColors.textPrimary,
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
            ),
            Text(
              formattedDate,
              style: const TextStyle(
                color: AppColors.textSecondary,
                fontSize: 14,
              ),
            ),
          ],
        ),
        centerTitle: false,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Section navigation dropdown
                Align(
                  alignment: Alignment.centerLeft,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.green[100],
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: DropdownButtonHideUnderline(
                      child: DropdownButton<String>(
                        value: _currentSection,
                        icon: const Icon(
                          Icons.keyboard_arrow_down,
                          color: Colors.green,
                          size: 16,
                        ),
                        style: const TextStyle(
                          color: Colors.green,
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                        ),
                        dropdownColor: Colors.green[50],
                        items: const [
                          DropdownMenuItem(
                            value: 'TITLE',
                            child: Text(
                              'TITLE',
                              style: TextStyle(
                                color: Colors.green,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          DropdownMenuItem(
                            value: 'ANCHORING PHENOMENON',
                            child: Text(
                              'ANCHORING PHENOMENON',
                              style: TextStyle(
                                color: Colors.green,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          DropdownMenuItem(
                            value: 'OBJECTIVE',
                            child: Text(
                              'OBJECTIVE',
                              style: TextStyle(
                                color: Colors.green,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                        onChanged: (value) {
                          if (value == 'TITLE') {
                            // Go back to title (parent of AP, grandparent of Objective)
                            Navigator.of(context).popUntil((route) => route.isFirst);
                            Navigator.of(context).push(
                              MaterialPageRoute(
                                builder: (context) => CreateTemplateScreen(
                                  existingModule: widget.module,
                                ),
                              ),
                            );
                          } else if (value == 'ANCHORING PHENOMENON') {
                            // Go back to AP (parent of Objective)
                            Navigator.of(context).pop();
                          }
                          // If OBJECTIVE is selected, stay on current page
                        },
                      ),
                    ),
                  ),
                ),

                const SizedBox(height: 24),

                // Learning Objectives section
                const Text(
                  'Learning Objective',
                  style: TextStyle(
                    color: AppColors.textPrimary,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 12),

                _buildPillDropdown(
                  value: _selectedLearningObjective,
                  options: _learningObjectiveOptions,
                  hint: 'Select Objective',
                  onChanged: (val) {
                    setState(() {
                      _selectedLearningObjective = val;
                    });
                  },
                ),

                const SizedBox(height: 28),

                // Subject Domains section
                const Text(
                  'Subject Domain',
                  style: TextStyle(
                    color: AppColors.textPrimary,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 12),

                Row(
                  children: [
                    Expanded(
                      child: _buildPillDropdown(
                        value: _selectedSubjectDomain,
                        options: _subjectDomainOptions,
                        hint: 'Select Domain',
                        onChanged: (val) {
                          setState(() {
                            _selectedSubjectDomain = val;
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 8),
                    _buildAddButton(() async {
                      if (_selectedLearningObjective != null && _selectedSubjectDomain != null) {
                        // Add to local state first
                        setState(() {
                          _addedCombinations.add({
                            'objective': _selectedLearningObjective!,
                            'domain': _selectedSubjectDomain!,
                          });
                        });

                        // Save to database immediately
                        await _saveCombinationsToDatabase();

                        setState(() {
                          // Reset selections after successful save
                          _selectedLearningObjective = null;
                          _selectedSubjectDomain = null;
                        });
                      }
                    }),
                  ],
                ),

                // Display added combinations
                if (_addedCombinations.isNotEmpty) ...[
                  const SizedBox(height: 16),
                  const Text(
                    'Current Combinations:',
                    style: TextStyle(
                      color: AppColors.textPrimary,
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  const SizedBox(height: 8),
                  ..._addedCombinations.asMap().entries.map((entry) {
                    final index = entry.key;
                    final combination = entry.value;
                    return Padding(
                      padding: const EdgeInsets.only(bottom: 8),
                      child: Row(
                        children: [
                          Expanded(
                            child: Container(
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              decoration: BoxDecoration(
                                color: Colors.green[50],
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(color: AppColors.inputBorder),
                              ),
                              child: Text(
                                '${combination['objective']}: ${combination['domain']}',
                                style: const TextStyle(
                                  color: AppColors.textPrimary,
                                  fontSize: 14,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                          _buildRemoveButton(() async {
                            if (index >= 0 && index < _addedCombinations.length) {
                              setState(() {
                                _addedCombinations.removeAt(index);
                              });
                              // Save to database immediately after removal
                              await _saveCombinationsToDatabase();
                            }
                          }),
                        ],
                      ),
                    );
                  }),
                ],

                const SizedBox(height: 32),

                const Text(
                  'Performance Expectation',
                  style: TextStyle(
                    color: AppColors.textPrimary,
                    fontSize: 18,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 16),

                // Performance Expectation Box
                Container(
                  width: double.infinity,
                  padding:
                      const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
                  decoration: BoxDecoration(
                    color: Colors.green[50],
                    borderRadius: BorderRadius.circular(16),
                  ),
                  child: Column(
                    children: [
                      Text(
                        learningObjectiveHeader,
                        style: TextStyle(
                          color: Colors.green[800],
                          fontWeight: FontWeight.bold,
                          fontSize: 14,
                          letterSpacing: 0.5,
                        ),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 12),
                      Text(
                        inquiryText,
                        style: const TextStyle(
                          color: AppColors.textPrimary,
                          fontSize: 16,
                          height: 1.4,
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 48),

                // Complete Button
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: ElevatedButton(
                    onPressed: () async {
                      final messenger = ScaffoldMessenger.of(context);
                      final navigator = Navigator.of(context);

                      // Check if at least one combination has been added
                      if (_addedCombinations.isEmpty) {
                        messenger.showSnackBar(
                          const SnackBar(
                            content: Text('Please add at least one learning objective and subject domain combination'),
                            backgroundColor: AppColors.error,
                          ),
                        );
                        return;
                      }

                      navigator.push(
                        MaterialPageRoute(builder: (context) => ThreeDLearning(
                          module: widget.module,
                        ))
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green[500],
                      foregroundColor: Colors.white,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'Complete',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// Builds a rounded pill-style dropdown
  Widget _buildPillDropdown({
    required String? value,
    required List<String> options,
    required String hint,
    required Function(String?) onChanged,
    String? Function(String?)? validator,
  }) {
  return DropdownButtonFormField<String>(
    initialValue: value,
    isExpanded: true,
    icon: const Icon(Icons.expand_more, color: AppColors.textSecondary),
    decoration: InputDecoration(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25),
        borderSide: const BorderSide(
          color: AppColors.inputBorder,
          width: 1.5,
        ),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25),
        borderSide: const BorderSide(
          color: AppColors.inputBorder,
          width: 1.5,
        ),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25),
        borderSide: const BorderSide(
          color: AppColors.inputBorder,
          width: 1.5,
        ),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25),
        borderSide: const BorderSide(
          color: AppColors.error,
          width: 1.5,
        ),
      ),
      focusedErrorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25),
        borderSide: const BorderSide(
          color: AppColors.error,
          width: 1.5,
        ),
      ),
      filled: true,
      fillColor: AppColors.inputBackground,
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
    ),
    hint: Text(
      hint,
      style: const TextStyle(color: AppColors.textSecondary),
    ),
    items: options
        .map(
          (opt) => DropdownMenuItem<String>(
            value: opt,
            child: Text(
              opt,
              overflow: TextOverflow.ellipsis,
              style: const TextStyle(
                color: AppColors.inputText,
                fontSize: 16,
              ),
            ),
          ),
        )
        .toList(),
    onChanged: onChanged,
    validator: validator,
    dropdownColor: AppColors.inputBackground,
  );
}


  Widget _buildAddButton(VoidCallback onPressed) {
    return IconButton(
      onPressed: onPressed,
      icon: const Icon(Icons.add_circle_outline,
          color: AppColors.textSecondary, size: 26),
    );
  }

  Widget _buildRemoveButton(VoidCallback onPressed) {
    return IconButton(
      onPressed: onPressed,
      icon: const Icon(Icons.remove_circle_outline,
          color: AppColors.error, size: 26),
    );
  }
}
